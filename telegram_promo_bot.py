import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import openai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize OpenAI client
openai.api_key = os.getenv('OPENAI_API_KEY')

# Language translations
TRANSLATIONS = {
    'en': {
        'welcome_title': 'üöÄ **Welcome to the Promo Text Generator Bot!** üöÄ',
        'welcome_message': 'I can help you create amazing promotional posts for your products!\n\nChoose your language first:',
        'language_selected': '‚úÖ Language set to English!\n\nChoose an option below to get started:',
        'main_menu_title': 'üöÄ **Promo Text Generator Bot - Main Menu**',
        'main_menu_subtitle': 'Choose an option to continue:',
        'generate_promo': 'üéØ Generate Promo Text',
        'categories': 'üìù Product Categories',
        'examples': 'üí° Examples',
        'help': '‚ùì Help',
        'language': 'üåç Language',
        'back_menu': '‚¨ÖÔ∏è Back to Main Menu',
        'generate_title': 'üéØ **Generate Promotional Text**',
        'generate_instructions': 'Ready to create amazing promotional content!\n\n**How to proceed:**\n1. Simply type the name of your product in the chat\n2. I\'ll generate compelling promotional text for you\n3. You can then copy and use it for your marketing!\n\n**Examples of what to send:**\n‚Ä¢ "Wireless Bluetooth Headphones"\n‚Ä¢ "Organic Green Tea"\n‚Ä¢ "Gaming Mechanical Keyboard"\n‚Ä¢ "Women\'s Running Shoes"\n\nJust type your product name below! üëá',
        'categories_title': 'üìù **Product Categories**',
        'categories_subtitle': 'Select a category to get tips and inspiration for your promotional text:',
        'electronics': 'üì± Electronics',
        'fashion': 'üëï Fashion',
        'home': 'üè† Home & Garden',
        'beauty': 'üíÑ Beauty',
        'gaming': 'üéÆ Gaming',
        'books': 'üìö Books',
        'examples_title': 'üí° **Example Promotional Texts**',
        'examples_content': 'Here are some examples of what I can generate:\n\n**üéß Wireless Headphones:**\n*"Experience freedom with our premium wireless headphones! üéµ Crystal-clear sound, 30-hour battery life, and noise cancellation technology. Perfect for work, travel, and workouts. Order now and get FREE shipping! üöö"*\n\n**üëü Running Shoes:**\n*"Step up your game with our lightweight running shoes! üèÉ‚Äç‚ôÄÔ∏è Advanced cushioning, breathable mesh, and durable design. Whether you\'re training for a marathon or daily jogs, these shoes will keep you comfortable. Get yours today! üí™"*\n\n**üì± Smartphone:**\n*"Capture life in stunning detail with our latest smartphone! üì∏ Professional-grade camera, all-day battery, and lightning-fast performance. Stay connected, create memories, and experience technology at its finest. Available now! ‚ú®"*\n\nReady to create your own? Just type any product name!',
        'help_title': '‚ùì **Help & Support**',
        'help_content': '**üîß How to use this bot:**\n\n1. **Generate Promo Text** - Click the button and send a product name\n2. **Browse Categories** - Get inspiration from different product types\n3. **View Examples** - See sample promotional texts I can create\n4. **Direct Input** - Type any product name anytime for instant results!\n\n**üí° Tips for better results:**\n‚Ä¢ Be specific (e.g., "Noise-cancelling wireless headphones")\n‚Ä¢ Include key features ("Waterproof fitness tracker")\n‚Ä¢ Mention target audience ("Gaming headset for professionals")\n\n**üéØ What I create for you:**\n‚Ä¢ Engaging promotional text (50-150 words)\n‚Ä¢ Social media ready content\n‚Ä¢ Professional marketing copy\n‚Ä¢ Call-to-action phrases\n‚Ä¢ Appropriate emojis\n\n**Commands:**\n/start - Show main menu\n/help - Show this help message\n\nNeed more help? Just start typing your product name! üöÄ',
        'promo_result': 'üéØ **Promotional Text for: {}**',
        'promo_footer': 'üí° *Feel free to customize this text for your specific needs!*',
        'generate_another': 'üîÑ Generate Another',
        'rate_limit': '‚ö†Ô∏è Rate limit exceeded. Please try again in a moment.',
        'request_error': '‚ùå There was an issue with the request. Please try again.',
        'general_error': '‚ùå Sorry, I encountered an error while generating the promotional text. Please try again.',
        'empty_product': 'Please provide a product name to generate promotional text.',
        'language_title': 'üåç **Choose Your Language**',
        'language_subtitle': 'Select your preferred language:',
        'openai_prompt': 'Create a compelling promotional post for the following product: {}\n\nThe promotional text should:\n- Be engaging and attention-grabbing\n- Highlight key benefits and features\n- Include a strong call-to-action\n- Be suitable for social media posting\n- Use emojis appropriately\n- Be between 50-150 words\n- Sound persuasive and professional\n- BE WRITTEN IN ENGLISH\n\nProduct: {}',
        'system_prompt': 'You are a professional marketing copywriter specializing in creating compelling promotional content for products. Your writing style is engaging, persuasive, and modern. Write in English.'
    },
    'ru': {
        'welcome_title': 'üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤!** üöÄ',
        'welcome_message': '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'language_selected': '‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:',
        'main_menu_title': 'üöÄ **–ë–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**',
        'main_menu_subtitle': '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:',
        'generate_promo': 'üéØ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç',
        'categories': 'üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤',
        'examples': 'üí° –ü—Ä–∏–º–µ—Ä—ã', 
        'help': '‚ùì –ü–æ–º–æ—â—å',
        'language': 'üåç –Ø–∑—ã–∫',
        'back_menu': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'generate_title': 'üéØ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞**',
        'generate_instructions': '–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n\n**–ö–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:**\n1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —á–∞—Ç–µ\n2. –Ø —Å–æ–∑–¥–∞–º —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—Å\n3. –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞!\n\n**–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:**\n‚Ä¢ "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ Bluetooth –Ω–∞—É—à–Ω–∏–∫–∏"\n‚Ä¢ "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –∑–µ–ª–µ–Ω—ã–π —á–∞–π"\n‚Ä¢ "–ò–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"\n‚Ä¢ "–ñ–µ–Ω—Å–∫–∏–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –±–µ–≥–∞"\n\n–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∏–∂–µ! üëá',
        'categories_title': 'üìù **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤**',
        'categories_subtitle': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:',
        'electronics': 'üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        'fashion': 'üëï –ú–æ–¥–∞',
        'home': 'üè† –î–æ–º –∏ —Å–∞–¥',
        'beauty': 'üíÑ –ö—Ä–∞—Å–æ—Ç–∞',
        'gaming': 'üéÆ –ò–≥—Ä—ã',
        'books': 'üìö –ö–Ω–∏–≥–∏',
        'examples_title': 'üí° **–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤**',
        'examples_content': '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–æ–≥–æ, —á—Ç–æ —è –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å:\n\n**üéß –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏:**\n*"–ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Å–≤–æ–±–æ–¥—É —Å –Ω–∞—à–∏–º–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–º–∏ –Ω–∞—É—à–Ω–∏–∫–∞–º–∏! üéµ –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–π –∑–≤—É–∫, 30-—á–∞—Å–æ–≤–∞—è –±–∞—Ç–∞—Ä–µ—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –¥–æ—Å—Ç–∞–≤–∫—É! üöö"*\n\n**üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –±–µ–≥–∞:**\n*"–ü–æ–¥–Ω–∏–º–∏—Ç–µ —Å–≤–æ—é –∏–≥—Ä—É —Å –Ω–∞—à–∏–º–∏ –ª–µ–≥–∫–∏–º–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∞–º–∏ –¥–ª—è –±–µ–≥–∞! üèÉ‚Äç‚ôÄÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è, –¥—ã—à–∞—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ—á–Ω—ã–π –¥–∏–∑–∞–π–Ω. –ì–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –ø—Ä–æ–±–µ–∂–∫–∞–º - —ç—Ç–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –æ–±–µ—Å–ø–µ—á–∞—Ç –∫–æ–º—Ñ–æ—Ä—Ç. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! üí™"*\n\n**üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω:**\n*"–ó–∞–ø–µ—á–∞—Ç–ª–µ–π—Ç–µ –∂–∏–∑–Ω—å –≤ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö –¥–µ—Ç–∞–ª—è—Ö —Å –Ω–∞—à–∏–º –Ω–æ–≤–µ–π—à–∏–º —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º! üì∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞, –±–∞—Ç–∞—Ä–µ—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å –∏ –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å! ‚ú®"*\n\n–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!',
        'help_title': '‚ùì **–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞**',
        'help_content': '**üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç:**\n\n1. **–°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç** - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n2. **–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π** - –ü–æ–ª—É—á–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤\n3. **–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–æ–≤** - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞–∑—Ü—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤\n4. **–ü—Ä—è–º–æ–π –≤–≤–æ–¥** - –í–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!\n\n**üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**\n‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–®—É–º–æ–ø–æ–¥–∞–≤–ª—è—é—â–∏–µ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏")\n‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ ("–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä")\n‚Ä¢ –£–ø–æ–º–∏–Ω–∞–π—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é ("–ò–≥—Ä–æ–≤–∞—è –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤")\n\n**üéØ –ß—Ç–æ —è —Å–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å:**\n‚Ä¢ –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç (50-150 —Å–ª–æ–≤)\n‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤—ã–π –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã\n‚Ä¢ –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é\n‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏\n\n**–ö–æ–º–∞–Ω–¥—ã:**\n/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n\n–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞! üöÄ',
        'promo_result': 'üéØ **–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è: {}**',
        'promo_footer': 'üí° *–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω—É–∂–¥!*',
        'generate_another': 'üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω',
        'rate_limit': '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–æ–º–µ–Ω—Ç.',
        'request_error': '‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        'general_error': '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        'empty_product': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.',
        'language_title': 'üåç **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫**',
        'language_subtitle': '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:',
        'openai_prompt': '–°–æ–∑–¥–∞–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞: {}\n\n–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω:\n- –ë—ã—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ\n- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n- –í–∫–ª—é—á–∞—Ç—å —Å–∏–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n- –ü–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\n- –£–º–µ—Å—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏\n- –ë—ã—Ç—å –¥–ª–∏–Ω–æ–π 50-150 —Å–ª–æ–≤\n- –ó–≤—É—á–∞—Ç—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ\n- –ë–´–¢–¨ –ù–ê–ü–ò–°–ê–ù–ù–´–ú –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï\n\n–¢–æ–≤–∞—Ä: {}',
        'system_prompt': '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤. –¢–≤–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
    },
    'ro': {
        'welcome_title': 'üöÄ **Bun venit la botul generator de texte promo»õionale!** üöÄ',
        'welcome_message': 'Te pot ajuta sƒÉ creezi postƒÉri promo»õionale uimitoare pentru produsele tale!\n\nAlege mai √Ænt√¢i limba:',
        'language_selected': '‚úÖ Limba setatƒÉ √Æn rom√¢nƒÉ!\n\nAlege o op»õiune de mai jos pentru a √Æncepe:',
        'main_menu_title': 'üöÄ **Bot generator de texte promo»õionale - Meniul principal**',
        'main_menu_subtitle': 'Alege o op»õiune pentru a continua:',
        'generate_promo': 'üéØ GenereazƒÉ text promo»õional',
        'categories': 'üìù Categorii de produse',
        'examples': 'üí° Exemple',
        'help': '‚ùì Ajutor',
        'language': 'üåç Limba',
        'back_menu': '‚¨ÖÔ∏è √énapoi la meniul principal',
        'generate_title': 'üéØ **Generare text promo»õional**',
        'generate_instructions': 'Gata sƒÉ creez con»õinut promo»õional uimitor!\n\n**Cum sƒÉ continui:**\n1. Pur »ôi simplu scrie numele produsului tƒÉu √Æn chat\n2. Voi genera un text promo»õional convingƒÉtor pentru tine\n3. Apoi √Æl po»õi copia »ôi folosi pentru marketing!\n\n**Exemple de ce sƒÉ trimi»õi:**\n‚Ä¢ "CƒÉ»ôti Bluetooth wireless"\n‚Ä¢ "Ceai verde organic"\n‚Ä¢ "TastaturƒÉ mecanicƒÉ pentru gaming"\n‚Ä¢ "Pantofi de alergare pentru femei"\n\nScrie numele produsului mai jos! üëá',
        'categories_title': 'üìù **Categorii de produse**',
        'categories_subtitle': 'SelecteazƒÉ o categorie pentru sfaturi »ôi inspira»õie pentru textul promo»õional:',
        'electronics': 'üì± Electronice',
        'fashion': 'üëï ModƒÉ',
        'home': 'üè† CasƒÉ »ôi grƒÉdinƒÉ',
        'beauty': 'üíÑ Frumuse»õe',
        'gaming': 'üéÆ Gaming',
        'books': 'üìö CƒÉr»õi',
        'examples_title': 'üí° **Exemple de texte promo»õionale**',
        'examples_content': 'IatƒÉ c√¢teva exemple de ce pot genera:\n\n**üéß CƒÉ»ôti wireless:**\n*"Simte libertatea cu cƒÉ»ôtile noastre premium wireless! üéµ Sunet cristalin, baterie de 30 de ore »ôi tehnologie de anulare a zgomotului. Perfect pentru muncƒÉ, cƒÉlƒÉtorii »ôi antrenamente. ComandƒÉ acum »ôi beneficiezi de livrare GRATUITƒÇ! üöö"*\n\n**üëü Pantofi de alergare:**\n*"RidicƒÉ-»õi nivelul cu pantofii no»ôtri u»ôori de alergare! üèÉ‚Äç‚ôÄÔ∏è Amortizare avansatƒÉ, material respirabil »ôi design durabil. Fie cƒÉ te antrenezi pentru maraton sau pentru alergƒÉri zilnice, ace»ôti pantofi te vor men»õine confortabil. Ob»õine-i astƒÉzi! üí™"*\n\n**üì± Smartphone:**\n*"Surprinde via»õa √Æn detalii uimitoare cu cel mai nou smartphone! üì∏ CamerƒÉ de nivel profesional, baterie pentru toatƒÉ ziua »ôi performan»õƒÉ fulgerƒÉtoare. RƒÉm√¢i conectat, creeazƒÉ amintiri »ôi experimenteazƒÉ tehnologia la cel mai √Ænalt nivel. Disponibil acum! ‚ú®"*\n\nGata sƒÉ creezi propriul tƒÉu? Scrie orice nume de produs!',
        'help_title': '‚ùì **Ajutor »ôi suport**',
        'help_content': '**üîß Cum sƒÉ folose»ôti acest bot:**\n\n1. **GenereazƒÉ text promo»õional** - ApasƒÉ butonul »ôi trimite numele produsului\n2. **RƒÉsfoie»ôte categoriile** - Ob»õine inspira»õie de la diferite tipuri de produse\n3. **Vezi exemple** - Prive»ôte exemple de texte promo»õionale\n4. **Introducere directƒÉ** - Scrie orice nume de produs oric√¢nd!\n\n**üí° Sfaturi pentru rezultate mai bune:**\n‚Ä¢ Fii specific (ex: "CƒÉ»ôti wireless cu anulare zgomot")\n‚Ä¢ Include caracteristici cheie ("Tracker fitness rezistent la apƒÉ")\n‚Ä¢ Men»õioneazƒÉ publicul »õintƒÉ ("CƒÉ»ôti gaming pentru profesioni»ôti")\n\n**üéØ Ce creez pentru tine:**\n‚Ä¢ Text promo»õional captivant (50-150 cuvinte)\n‚Ä¢ Con»õinut gata pentru re»õelele sociale\n‚Ä¢ Texte de marketing profesionale\n‚Ä¢ ChemƒÉri la ac»õiune\n‚Ä¢ Emoji-uri potrivite\n\n**Comenzi:**\n/start - AratƒÉ meniul principal\n/help - AratƒÉ acest mesaj de ajutor\n\nAi nevoie de mai mult ajutor? Doar √Æncepe sƒÉ scrii numele produsului! üöÄ',
        'promo_result': 'üéØ **Text promo»õional pentru: {}**',
        'promo_footer': 'üí° *Simte-te liber sƒÉ personalizezi acest text pentru nevoile tale specifice!*',
        'generate_another': 'üîÑ GenereazƒÉ altul',
        'rate_limit': '‚ö†Ô∏è Limita de cereri depƒÉ»ôitƒÉ. Te rog sƒÉ √Æncerci din nou √Æntr-un moment.',
        'request_error': '‚ùå A fost o problemƒÉ cu cererea. Te rog sƒÉ √Æncerci din nou.',
        'general_error': '‚ùå √émi pare rƒÉu, am √Ænt√¢mpinat o eroare la generarea textului promo»õional. Te rog sƒÉ √Æncerci din nou.',
        'empty_product': 'Te rog sƒÉ furnizezi numele unui produs pentru a genera text promo»õional.',
        'language_title': 'üåç **Alege limba ta**',
        'language_subtitle': 'SelecteazƒÉ limba preferatƒÉ:',
        'openai_prompt': 'CreeazƒÉ un post promo»õional convingƒÉtor pentru urmƒÉtorul produs: {}\n\nTextul promo»õional trebuie sƒÉ:\n- Fie captivant »ôi sƒÉ atragƒÉ aten»õia\n- SƒÉ eviden»õieze beneficiile »ôi caracteristicile cheie\n- SƒÉ includƒÉ o chemare puternicƒÉ la ac»õiune\n- SƒÉ fie potrivit pentru postarea pe re»õelele sociale\n- SƒÉ foloseascƒÉ emoji-uri √Æn mod corespunzƒÉtor\n- SƒÉ aibƒÉ √Æntre 50-150 cuvinte\n- SƒÉ sune convingƒÉtor »ôi profesional\n- SƒÇ FIE SCRIS √éN LIMBA ROM√ÇNƒÇ\n\nProdus: {}',
        'system_prompt': 'E»ôti un copywriter de marketing profesional specializat √Æn crearea de con»õinut promo»õional convingƒÉtor pentru produse. Stilul tƒÉu de scriere este captivant, convingƒÉtor »ôi modern. Scrie √Æn limba rom√¢nƒÉ.'
    }
}

class PromoBot:
    def __init__(self):
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.telegram_token:
            raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")
        if not openai.api_key:
            raise ValueError("OPENAI_API_KEY not found in environment variables")

    def get_user_language(self, context):
        """Get user's selected language, default to English."""
        return context.user_data.get('language', 'en')

    def get_text(self, key, context, *args):
        """Get translated text for user's language."""
        lang = self.get_user_language(context)
        text = TRANSLATIONS[lang].get(key, TRANSLATIONS['en'][key])
        if args:
            return text.format(*args)
        return text

    def get_language_selection_keyboard(self):
        """Create language selection keyboard in grid format."""
        keyboard = [
            [InlineKeyboardButton("üá∫üá∏ English", callback_data='lang_en'), 
             InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
            [InlineKeyboardButton("üá∑üá¥ Rom√¢nƒÉ", callback_data='lang_ro')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_main_menu_keyboard(self, context):
        """Create the main menu inline keyboard in grid format."""
        keyboard = [
            [InlineKeyboardButton(self.get_text('generate_promo', context), callback_data='generate_promo'),
             InlineKeyboardButton(self.get_text('categories', context), callback_data='categories')],
            [InlineKeyboardButton(self.get_text('examples', context), callback_data='examples'),
             InlineKeyboardButton(self.get_text('help', context), callback_data='help')],
            [InlineKeyboardButton(self.get_text('language', context), callback_data='language_select')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_categories_keyboard(self, context):
        """Create the product categories inline keyboard in grid format."""
        keyboard = [
            [InlineKeyboardButton(self.get_text('electronics', context), callback_data='cat_electronics'),
             InlineKeyboardButton(self.get_text('fashion', context), callback_data='cat_fashion')],
            [InlineKeyboardButton(self.get_text('home', context), callback_data='cat_home'),
             InlineKeyboardButton(self.get_text('beauty', context), callback_data='cat_beauty')],
            [InlineKeyboardButton(self.get_text('gaming', context), callback_data='cat_gaming'),
             InlineKeyboardButton(self.get_text('books', context), callback_data='cat_books')],
            [InlineKeyboardButton(self.get_text('back_menu', context), callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_back_to_menu_keyboard(self, context):
        """Create a simple back to menu keyboard."""
        keyboard = [
            [InlineKeyboardButton(self.get_text('back_menu', context), callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_post_generation_keyboard(self, context):
        """Create keyboard for after text generation in grid format."""
        keyboard = [
            [InlineKeyboardButton(self.get_text('generate_another', context), callback_data='generate_promo'),
             InlineKeyboardButton(self.get_text('back_menu', context), callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Send the welcome message with language selection."""
        # If user doesn't have a language set, show language selection first
        if 'language' not in context.user_data:
            welcome_message = TRANSLATIONS['en']['welcome_message']
            await update.message.reply_text(
                f"{TRANSLATIONS['en']['welcome_title']}\n\n{welcome_message}",
                parse_mode='Markdown',
                reply_markup=self.get_language_selection_keyboard()
            )
        else:
            # Show main menu if language is already set
            await self.show_main_menu_message(update, context)

    async def show_main_menu_message(self, update, context):
        """Show main menu as a new message."""
        text = f"{self.get_text('main_menu_title', context)}\n\n{self.get_text('main_menu_subtitle', context)}"
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=self.get_main_menu_keyboard(context)
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Send help message with menu."""
        # Ensure user has a language set
        if 'language' not in context.user_data:
            context.user_data['language'] = 'en'
        
        await update.message.reply_text(
            self.get_text('help_content', context),
            parse_mode='Markdown',
            reply_markup=self.get_main_menu_keyboard(context)
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle button press callbacks."""
        query = update.callback_query
        await query.answer()

        # Handle language selection
        if query.data.startswith('lang_'):
            await self.handle_language_selection(query, context)
        elif query.data == 'language_select':
            await self.show_language_selection(query, context)
        elif query.data == 'main_menu':
            await self.show_main_menu(query, context)
        elif query.data == 'generate_promo':
            await self.show_generate_promo(query, context)
        elif query.data == 'categories':
            await self.show_categories(query, context)
        elif query.data == 'examples':
            await self.show_examples(query, context)
        elif query.data == 'help':
            await self.show_help(query, context)
        elif query.data.startswith('cat_'):
            await self.show_category_info(query, context)

    async def handle_language_selection(self, query, context):
        """Handle language selection."""
        lang_code = query.data.split('_')[1]
        context.user_data['language'] = lang_code
        
        text = f"{self.get_text('language_selected', context)}"
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_main_menu_keyboard(context)
        )

    async def show_language_selection(self, query, context):
        """Show language selection menu."""
        await query.edit_message_text(
            text=f"{self.get_text('language_title', context)}\n\n{self.get_text('language_subtitle', context)}",
            parse_mode='Markdown',
            reply_markup=self.get_language_selection_keyboard()
        )

    async def show_main_menu(self, query, context):
        """Show the main menu."""
        text = f"{self.get_text('main_menu_title', context)}\n\n{self.get_text('main_menu_subtitle', context)}"
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_main_menu_keyboard(context)
        )

    async def show_generate_promo(self, query, context):
        """Show the generate promo text instructions."""
        await query.edit_message_text(
            text=self.get_text('generate_instructions', context),
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def show_categories(self, query, context):
        """Show product categories."""
        text = f"{self.get_text('categories_title', context)}\n\n{self.get_text('categories_subtitle', context)}"
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_categories_keyboard(context)
        )

    async def show_examples(self, query, context):
        """Show example promotional texts."""
        await query.edit_message_text(
            text=self.get_text('examples_content', context),
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def show_help(self, query, context):
        """Show help information."""
        await query.edit_message_text(
            text=self.get_text('help_content', context),
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def show_category_info(self, query, context):
        """Show information about a specific category."""
        # For now, showing a simplified version - you can expand this with translated category info
        category_name = query.data.split('_')[1]
        text = f"üìù **{category_name.title()} Category**\n\nChoose this category to get specialized tips for creating promotional text.\n\nReady to create promotional text?\nJust type your product name in the chat below! üëá"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def generate_promo_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Generate promotional text for the given product."""
        # Ensure user has a language set
        if 'language' not in context.user_data:
            context.user_data['language'] = 'en'

        product_name = update.message.text.strip()
        
        if not product_name:
            await update.message.reply_text(
                self.get_text('empty_product', context),
                reply_markup=self.get_main_menu_keyboard(context)
            )
            return

        # Show typing action
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        try:
            # Create the prompt for OpenAI in the user's language
            prompt = self.get_text('openai_prompt', context, product_name, product_name)
            system_prompt = self.get_text('system_prompt', context)

            # Generate response using OpenAI
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.7
            )

            promo_text = response.choices[0].message.content.strip()

            # Format the response
            formatted_response = f"""
{self.get_text('promo_result', context, product_name)}

{promo_text}

---
{self.get_text('promo_footer', context)}
            """

            await update.message.reply_text(
                formatted_response, 
                parse_mode='Markdown',
                reply_markup=self.get_post_generation_keyboard(context)
            )

        except openai.error.RateLimitError:
            await update.message.reply_text(
                self.get_text('rate_limit', context),
                reply_markup=self.get_main_menu_keyboard(context)
            )
        except openai.error.InvalidRequestError as e:
            logger.error(f"Invalid request to OpenAI: {e}")
            await update.message.reply_text(
                self.get_text('request_error', context),
                reply_markup=self.get_main_menu_keyboard(context)
            )
        except Exception as e:
            logger.error(f"Error generating promo text: {e}")
            await update.message.reply_text(
                self.get_text('general_error', context),
                reply_markup=self.get_main_menu_keyboard(context)
            )

    def run(self):
        """Start the bot."""
        # Create the Application
        application = Application.builder().token(self.telegram_token).build()

        # Add handlers
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.generate_promo_text))

        # Run the bot
        logger.info("Starting the Promo Bot...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        bot = PromoBot()
        bot.run()
    except ValueError as e:
        logger.error(f"Configuration error: {e}")
        print(f"Error: {e}")
        print("Please check your environment variables in the .env file")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        print(f"An unexpected error occurred: {e}")