import os
import logging
import re
import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin
from PIL import Image
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import openai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize OpenAI client
openai.api_key = os.getenv('OPENAI_API_KEY')

# Language translations
TRANSLATIONS = {
    'en': {
        'welcome_title': 'üöÄ **Welcome to the Promo Text Generator Bot!** üöÄ',
        'welcome_message': 'I can help you create amazing promotional posts for your products!\n\nChoose your language first:',
        'language_selected': '‚úÖ Language set to English!\n\nChoose an option below to get started:',
        'main_menu_title': 'üöÄ **Promo Text Generator Bot - Main Menu**',
        'main_menu_subtitle': 'Choose an option to continue:',
        'generate_promo': 'üéØ Generate Promo Text',
        'my_products': 'üì¶ My Products',
        'examples': 'üí° Examples',
        'help': '‚ùì Help',
        'language': 'üåç Language',
        'back_menu': '‚¨ÖÔ∏è Back to Main Menu',
        'generate_title': 'üéØ **Generate Promotional Text**',
        'generate_instructions': 'Ready to create amazing promotional content!\n\n**How to proceed:**\n1. Simply type the name of your product in the chat\n2. I\'ll generate compelling promotional text for you\n3. You can then copy and use it for your marketing!\n\n**Examples of what to send:**\n‚Ä¢ "Wireless Bluetooth Headphones"\n‚Ä¢ "Organic Green Tea"\n‚Ä¢ "Gaming Mechanical Keyboard"\n‚Ä¢ "Women\'s Running Shoes"\n\nJust type your product name below! üëá',
        'examples_title': 'üí° **Example Promotional Texts**',
        'examples_content': 'Here are some examples of what I can generate:\n\n**üéß Wireless Headphones:**\n*"Experience freedom with our premium wireless headphones! üéµ Crystal-clear sound, 30-hour battery life, and noise cancellation technology. Perfect for work, travel, and workouts. Order now and get FREE shipping! üöö"*\n\n**üëü Running Shoes:**\n*"Step up your game with our lightweight running shoes! üèÉ‚Äç‚ôÄÔ∏è Advanced cushioning, breathable mesh, and durable design. Whether you\'re training for a marathon or daily jogs, these shoes will keep you comfortable. Get yours today! üí™"*\n\n**üì± Smartphone:**\n*"Capture life in stunning detail with our latest smartphone! üì∏ Professional-grade camera, all-day battery, and lightning-fast performance. Stay connected, create memories, and experience technology at its finest. Available now! ‚ú®"*\n\nReady to create your own? Just type any product name!',
        'help_title': '‚ùì **Help & Support**',
        'help_content': '**üîß How to use this bot:**\n\n1. **Generate Promo Text** - Click the button and send a product name\n2. **Browse Categories** - Get inspiration from different product types\n3. **View Examples** - See sample promotional texts I can create\n4. **Direct Input** - Type any product name anytime for instant results!\n\n**üí° Tips for better results:**\n‚Ä¢ Be specific (e.g., "Noise-cancelling wireless headphones")\n‚Ä¢ Include key features ("Waterproof fitness tracker")\n‚Ä¢ Mention target audience ("Gaming headset for professionals")\n\n**üéØ What I create for you:**\n‚Ä¢ Engaging promotional text (50-150 words)\n‚Ä¢ Social media ready content\n‚Ä¢ Professional marketing copy\n‚Ä¢ Call-to-action phrases\n‚Ä¢ Appropriate emojis\n\n**Commands:**\n/start - Show main menu\n/help - Show this help message\n\nNeed more help? Just start typing your product name! üöÄ',
        'promo_result': 'üéØ **Promotional Text for: {}**',
        'promo_footer': 'üí° *Feel free to customize this text for your specific needs!*',
        'generate_another': 'üîÑ Generate Another',
        'rate_limit': '‚ö†Ô∏è Rate limit exceeded. Please try again in a moment.',
        'request_error': '‚ùå There was an issue with the request. Please try again.',
        'general_error': '‚ùå Sorry, I encountered an error while generating the promotional text. Please try again.',
        'empty_product': 'Please provide a product name to generate promotional text.',
        'language_title': 'üåç **Choose Your Language**',
        'language_subtitle': 'Select your preferred language:',
        'openai_prompt': 'Create a compelling promotional post for the following product: {}\n\nThe promotional text should:\n- Be engaging and attention-grabbing\n- Highlight key benefits and features\n- Include a strong call-to-action\n- Be suitable for social media posting\n- Use emojis appropriately\n- Be between 50-150 words\n- Sound persuasive and professional\n- BE WRITTEN IN ENGLISH\n\nProduct: {}',
        'system_prompt': 'You are a professional marketing copywriter specializing in creating compelling promotional content for products. Your writing style is engaging, persuasive, and modern. Write in English.'
    },
    'ru': {
        'welcome_title': 'üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤!** üöÄ',
        'welcome_message': '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'language_selected': '‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:',
        'main_menu_title': 'üöÄ **–ë–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**',
        'main_menu_subtitle': '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:',
        'generate_promo': 'üéØ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç',
        'my_products': 'üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã',
        'examples': 'üí° –ü—Ä–∏–º–µ—Ä—ã', 
        'help': '‚ùì –ü–æ–º–æ—â—å',
        'language': 'üåç –Ø–∑—ã–∫',
        'back_menu': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'generate_title': 'üéØ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞**',
        'generate_instructions': '–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n\n**–ö–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:**\n1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —á–∞—Ç–µ\n2. –Ø —Å–æ–∑–¥–∞–º —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—Å\n3. –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞!\n\n**–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:**\n‚Ä¢ "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ Bluetooth –Ω–∞—É—à–Ω–∏–∫–∏"\n‚Ä¢ "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –∑–µ–ª–µ–Ω—ã–π —á–∞–π"\n‚Ä¢ "–ò–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"\n‚Ä¢ "–ñ–µ–Ω—Å–∫–∏–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –±–µ–≥–∞"\n\n–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∏–∂–µ! üëá',
        'examples_title': 'üí° **–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤**',
        'examples_content': '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–æ–≥–æ, —á—Ç–æ —è –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å:\n\n**üéß –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏:**\n*"–ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Å–≤–æ–±–æ–¥—É —Å –Ω–∞—à–∏–º–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–º–∏ –Ω–∞—É—à–Ω–∏–∫–∞–º–∏! üéµ –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–π –∑–≤—É–∫, 30-—á–∞—Å–æ–≤–∞—è –±–∞—Ç–∞—Ä–µ—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –¥–æ—Å—Ç–∞–≤–∫—É! üöö"*\n\n**üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –±–µ–≥–∞:**\n*"–ü–æ–¥–Ω–∏–º–∏—Ç–µ —Å–≤–æ—é –∏–≥—Ä—É —Å –Ω–∞—à–∏–º–∏ –ª–µ–≥–∫–∏–º–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∞–º–∏ –¥–ª—è –±–µ–≥–∞! üèÉ‚Äç‚ôÄÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è, –¥—ã—à–∞—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–æ—á–Ω—ã–π –¥–∏–∑–∞–π–Ω. –ì–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –ø—Ä–æ–±–µ–∂–∫–∞–º - —ç—Ç–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –æ–±–µ—Å–ø–µ—á–∞—Ç –∫–æ–º—Ñ–æ—Ä—Ç. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! üí™"*\n\n**üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω:**\n*"–ó–∞–ø–µ—á–∞—Ç–ª–µ–π—Ç–µ –∂–∏–∑–Ω—å –≤ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö –¥–µ—Ç–∞–ª—è—Ö —Å –Ω–∞—à–∏–º –Ω–æ–≤–µ–π—à–∏–º —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º! üì∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞, –±–∞—Ç–∞—Ä–µ—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å –∏ –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å! ‚ú®"*\n\n–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!',
        'help_title': '‚ùì **–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞**',
        'help_content': '**üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç:**\n\n1. **–°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç** - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n2. **–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π** - –ü–æ–ª—É—á–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤\n3. **–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–æ–≤** - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞–∑—Ü—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤\n4. **–ü—Ä—è–º–æ–π –≤–≤–æ–¥** - –í–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!\n\n**üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**\n‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–®—É–º–æ–ø–æ–¥–∞–≤–ª—è—é—â–∏–µ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏")\n‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ ("–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä")\n‚Ä¢ –£–ø–æ–º–∏–Ω–∞–π—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é ("–ò–≥—Ä–æ–≤–∞—è –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤")\n\n**üéØ –ß—Ç–æ —è —Å–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å:**\n‚Ä¢ –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç (50-150 —Å–ª–æ–≤)\n‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤—ã–π –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã\n‚Ä¢ –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é\n‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏\n\n**–ö–æ–º–∞–Ω–¥—ã:**\n/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n\n–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞! üöÄ',
        'promo_result': 'üéØ **–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è: {}**',
        'promo_footer': 'üí° *–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω—É–∂–¥!*',
        'generate_another': 'üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω',
        'rate_limit': '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–æ–º–µ–Ω—Ç.',
        'request_error': '‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        'general_error': '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        'empty_product': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.',
        'language_title': 'üåç **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫**',
        'language_subtitle': '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:',
        'openai_prompt': '–°–æ–∑–¥–∞–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞: {}\n\n–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω:\n- –ë—ã—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ\n- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n- –í–∫–ª—é—á–∞—Ç—å —Å–∏–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n- –ü–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\n- –£–º–µ—Å—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏\n- –ë—ã—Ç—å –¥–ª–∏–Ω–æ–π 50-150 —Å–ª–æ–≤\n- –ó–≤—É—á–∞—Ç—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ\n- –ë–´–¢–¨ –ù–ê–ü–ò–°–ê–ù–ù–´–ú –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï\n\n–¢–æ–≤–∞—Ä: {}',
        'system_prompt': '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤. –¢–≤–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
    },
    'ro': {
        'welcome_title': 'üöÄ **Bun venit la botul generator de texte promo»õionale!** üöÄ',
        'welcome_message': 'Te pot ajuta sƒÉ creezi postƒÉri promo»õionale uimitoare pentru produsele tale!\n\nAlege mai √Ænt√¢i limba:',
        'language_selected': '‚úÖ Limba setatƒÉ √Æn rom√¢nƒÉ!\n\nAlege o op»õiune de mai jos pentru a √Æncepe:',
        'main_menu_title': 'üöÄ **Bot generator de texte promo»õionale - Meniul principal**',
        'main_menu_subtitle': 'Alege o op»õiune pentru a continua:',
        'generate_promo': 'üéØ GenereazƒÉ text promo»õional',
        'my_products': 'üì¶ Produsele mele',
        'examples': 'üí° Exemple',
        'help': '‚ùì Ajutor',
        'language': 'üåç Limba',
        'back_menu': '‚¨ÖÔ∏è √énapoi la meniul principal',
        'generate_title': 'üéØ **Generare text promo»õional**',
        'generate_instructions': 'Gata sƒÉ creez con»õinut promo»õional uimitor!\n\n**Cum sƒÉ continui:**\n1. Pur »ôi simplu scrie numele produsului tƒÉu √Æn chat\n2. Voi genera un text promo»õional convingƒÉtor pentru tine\n3. Apoi √Æl po»õi copia »ôi folosi pentru marketing!\n\n**Exemple de ce sƒÉ trimi»õi:**\n‚Ä¢ "CƒÉ»ôti Bluetooth wireless"\n‚Ä¢ "Ceai verde organic"\n‚Ä¢ "TastaturƒÉ mecanicƒÉ pentru gaming"\n‚Ä¢ "Pantofi de alergare pentru femei"\n\nScrie numele produsului mai jos! üëá',
        'examples_title': 'üí° **Exemple de texte promo»õionale**',
        'examples_content': 'IatƒÉ c√¢teva exemple de ce pot genera:\n\n**üéß CƒÉ»ôti wireless:**\n*"Simte libertatea cu cƒÉ»ôtile noastre premium wireless! üéµ Sunet cristalin, baterie de 30 de ore »ôi tehnologie de anulare a zgomotului. Perfect pentru muncƒÉ, cƒÉlƒÉtorii »ôi antrenamente. ComandƒÉ acum »ôi beneficiezi de livrare GRATUITƒÇ! üöö"*\n\n**üëü Pantofi de alergare:**\n*"RidicƒÉ-»õi nivelul cu pantofii no»ôtri u»ôori de alergare! üèÉ‚Äç‚ôÄÔ∏è Amortizare avansatƒÉ, material respirabil »ôi design durabil. Fie cƒÉ te antrenezi pentru maraton sau pentru alergƒÉri zilnice, ace»ôti pantofi te vor men»õine confortabil. Ob»õine-i astƒÉzi! üí™"*\n\n**üì± Smartphone:**\n*"Surprinde via»õa √Æn detalii uimitoare cu cel mai nou smartphone! üì∏ CamerƒÉ de nivel profesional, baterie pentru toatƒÉ ziua »ôi performan»õƒÉ fulgerƒÉtoare. RƒÉm√¢i conectat, creeazƒÉ amintiri »ôi experimenteazƒÉ tehnologia la cel mai √Ænalt nivel. Disponibil acum! ‚ú®"*\n\nGata sƒÉ creezi propriul tƒÉu? Scrie orice nume de produs!',
        'help_title': '‚ùì **Ajutor »ôi suport**',
        'help_content': '**üîß Cum sƒÉ folose»ôti acest bot:**\n\n1. **GenereazƒÉ text promo»õional** - ApasƒÉ butonul »ôi trimite numele produsului\n2. **RƒÉsfoie»ôte categoriile** - Ob»õine inspira»õie de la diferite tipuri de produse\n3. **Vezi exemple** - Prive»ôte exemple de texte promo»õionale\n4. **Introducere directƒÉ** - Scrie orice nume de produs oric√¢nd!\n\n**üí° Sfaturi pentru rezultate mai bune:**\n‚Ä¢ Fii specific (ex: "CƒÉ»ôti wireless cu anulare zgomot")\n‚Ä¢ Include caracteristici cheie ("Tracker fitness rezistent la apƒÉ")\n‚Ä¢ Men»õioneazƒÉ publicul »õintƒÉ ("CƒÉ»ôti gaming pentru profesioni»ôti")\n\n**üéØ Ce creez pentru tine:**\n‚Ä¢ Text promo»õional captivant (50-150 cuvinte)\n‚Ä¢ Con»õinut gata pentru re»õelele sociale\n‚Ä¢ Texte de marketing profesionale\n‚Ä¢ ChemƒÉri la ac»õiune\n‚Ä¢ Emoji-uri potrivite\n\n**Comenzi:**\n/start - AratƒÉ meniul principal\n/help - AratƒÉ acest mesaj de ajutor\n\nAi nevoie de mai mult ajutor? Doar √Æncepe sƒÉ scrii numele produsului! üöÄ',
        'promo_result': 'üéØ **Text promo»õional pentru: {}**',
        'promo_footer': 'üí° *Simte-te liber sƒÉ personalizezi acest text pentru nevoile tale specifice!*',
        'generate_another': 'üîÑ GenereazƒÉ altul',
        'rate_limit': '‚ö†Ô∏è Limita de cereri depƒÉ»ôitƒÉ. Te rog sƒÉ √Æncerci din nou √Æntr-un moment.',
        'request_error': '‚ùå A fost o problemƒÉ cu cererea. Te rog sƒÉ √Æncerci din nou.',
        'general_error': '‚ùå √émi pare rƒÉu, am √Ænt√¢mpinat o eroare la generarea textului promo»õional. Te rog sƒÉ √Æncerci din nou.',
        'empty_product': 'Te rog sƒÉ furnizezi numele unui produs pentru a genera text promo»õional.',
        'language_title': 'üåç **Alege limba ta**',
        'language_subtitle': 'SelecteazƒÉ limba preferatƒÉ:',
        'openai_prompt': 'CreeazƒÉ un post promo»õional convingƒÉtor pentru urmƒÉtorul produs: {}\n\nTextul promo»õional trebuie sƒÉ:\n- Fie captivant »ôi sƒÉ atragƒÉ aten»õia\n- SƒÉ eviden»õieze beneficiile »ôi caracteristicile cheie\n- SƒÉ includƒÉ o chemare puternicƒÉ la ac»õiune\n- SƒÉ fie potrivit pentru postarea pe re»õelele sociale\n- SƒÉ foloseascƒÉ emoji-uri √Æn mod corespunzƒÉtor\n- SƒÉ aibƒÉ √Æntre 50-150 cuvinte\n- SƒÉ sune convingƒÉtor »ôi profesional\n- SƒÇ FIE SCRIS √éN LIMBA ROM√ÇNƒÇ\n\nProdus: {}',
        'system_prompt': 'E»ôti un copywriter de marketing profesional specializat √Æn crearea de con»õinut promo»õional convingƒÉtor pentru produse. Stilul tƒÉu de scriere este captivant, convingƒÉtor »ôi modern. Scrie √Æn limba rom√¢nƒÉ.'
    }
}

class PromoBot:
    def __init__(self):
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.telegram_token:
            raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")
        if not openai.api_key:
            raise ValueError("OPENAI_API_KEY not found in environment variables")

    def get_user_language(self, context):
        """Get user's selected language, default to English."""
        return context.user_data.get('language', 'en')

    def get_text(self, key, context, *args):
        """Get translated text for user's language."""
        lang = self.get_user_language(context)
        text = TRANSLATIONS[lang].get(key, TRANSLATIONS['en'][key])
        if args:
            return text.format(*args)
        return text

    def get_language_selection_keyboard(self):
        """Create language selection keyboard in grid format."""
        keyboard = [
            [InlineKeyboardButton("üá∫üá∏ English", callback_data='lang_en'), 
             InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
            [InlineKeyboardButton("üá∑üá¥ Rom√¢nƒÉ", callback_data='lang_ro')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_main_menu_keyboard(self, context):
        """Create the main menu inline keyboard in grid format."""
        keyboard = [
            [InlineKeyboardButton(self.get_text('generate_promo', context), callback_data='generate_promo'),
             InlineKeyboardButton(self.get_text('my_products', context), callback_data='my_products')],
            [InlineKeyboardButton(self.get_text('examples', context), callback_data='examples'),
             InlineKeyboardButton(self.get_text('help', context), callback_data='help')],
            [InlineKeyboardButton("üì¢ Channel Settings", callback_data='channel_settings'),
             InlineKeyboardButton(self.get_text('language', context), callback_data='language_select')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_back_to_menu_keyboard(self, context):
        """Create a simple back to menu keyboard."""
        keyboard = [
            [InlineKeyboardButton(self.get_text('back_menu', context), callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_channel_settings_keyboard(self, context):
        """Create keyboard for channel settings."""
        channel_info = context.user_data.get('channel_info', {})
        channel_id = channel_info.get('channel_id')
        auto_post = channel_info.get('auto_post', False)
        
        if channel_id:
            keyboard = [
                [InlineKeyboardButton(f"üìã Current: {channel_id}", callback_data='channel_info')],
                [InlineKeyboardButton("‚úèÔ∏è Change Channel", callback_data='set_channel'),
                 InlineKeyboardButton("‚ùå Remove Channel", callback_data='remove_channel')],
                [InlineKeyboardButton(f"ü§ñ Auto-post: {'‚úÖ ON' if auto_post else '‚ùå OFF'}", callback_data='toggle_autopost')],
                [InlineKeyboardButton("üìä Post History", callback_data='post_history')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Back to Main Menu", callback_data='main_menu')]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("‚ûï Add Channel/Group", callback_data='set_channel')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Back to Main Menu", callback_data='main_menu')]
            ]
        return InlineKeyboardMarkup(keyboard)

    def get_post_generation_keyboard(self, context):
        """Create keyboard for after text generation with channel posting option."""
        channel_info = context.user_data.get('channel_info', {})
        has_channel = bool(channel_info.get('channel_id'))
        
        if has_channel:
            keyboard = [
                [InlineKeyboardButton("üîÑ Generate Another", callback_data='generate_promo'),
                 InlineKeyboardButton("üì§ Post to Channel", callback_data='post_to_channel')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Main Menu", callback_data='main_menu')]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ Generate Another", callback_data='generate_promo'),
                 InlineKeyboardButton("‚¨ÖÔ∏è Main Menu", callback_data='main_menu')]
            ]
        return InlineKeyboardMarkup(keyboard)

    def get_post_confirmation_keyboard(self, context):
        """Create keyboard for post confirmation."""
        keyboard = [
            [InlineKeyboardButton("‚úÖ Post Now", callback_data='confirm_post'),
             InlineKeyboardButton("‚úèÔ∏è Edit Text", callback_data='edit_post')],
            [InlineKeyboardButton("‚ùå Cancel", callback_data='cancel_post')]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def verify_channel_permissions(self, context, channel_id):
        """Verify bot has admin permissions in channel/group."""
        try:
            # Remove @ if present
            if channel_id.startswith('@'):
                channel_id = channel_id[1:]
            
            # Get chat member (bot) info
            bot_member = await context.bot.get_chat_member(f"@{channel_id}", context.bot.id)
            
            # Check if bot is admin
            if bot_member.status not in ['administrator', 'creator']:
                return False, "Bot is not an administrator in this channel/group"
            
            # Check if bot can post messages
            if hasattr(bot_member, 'can_post_messages') and not bot_member.can_post_messages:
                return False, "Bot doesn't have permission to post messages"
            
            # Send test message and delete it
            test_msg = await context.bot.send_message(f"@{channel_id}", "ü§ñ Bot verification test - this message will be deleted")
            await context.bot.delete_message(f"@{channel_id}", test_msg.message_id)
            
            return True, "Permissions verified successfully"
            
        except Exception as e:
            return False, f"Error: {str(e)}"

    def generate_hashtags(self, product_name, context):
        """Generate relevant hashtags for the product."""
        # Basic hashtag generation - can be enhanced
        words = product_name.lower().replace('-', ' ').replace('_', ' ').split()
        hashtags = []
        
        # Add product-specific hashtags
        for word in words:
            if len(word) > 2:  # Skip short words
                hashtags.append(f"#{word}")
        
        # Add general marketing hashtags
        hashtags.extend(["#promo", "#sale", "#newproduct", "#shopping"])
        
        return " ".join(hashtags[:8])  # Limit to 8 hashtags

    async def post_to_channel_action(self, context, text, product_name):
        """Post the promotional text to configured channel."""
        channel_info = context.user_data.get('channel_info', {})
        channel_id = channel_info.get('channel_id')
        
        if not channel_id:
            return False, "No channel configured"
        
        try:
            # Generate hashtags
            hashtags = self.generate_hashtags(product_name, context)
            
            # Format final post
            final_post = f"{text}\n\n{hashtags}"
            
            # Post to channel
            sent_message = await context.bot.send_message(f"@{channel_id}", final_post)
            
            # Store post history
            if 'post_history' not in context.user_data:
                context.user_data['post_history'] = []
            
            context.user_data['post_history'].append({
                'product': product_name,
                'timestamp': sent_message.date.strftime('%Y-%m-%d %H:%M'),
                'message_id': sent_message.message_id,
                'status': 'success'
            })
            
            return True, f"Posted successfully to {channel_id}"
            
        except Exception as e:
            # Store failed post
            if 'post_history' not in context.user_data:
                context.user_data['post_history'] = []
            
            context.user_data['post_history'].append({
                'product': product_name,
                'timestamp': 'Failed',
                'message_id': None,
                'status': f'failed: {str(e)}'
            })
            
            return False, f"Failed to post: {str(e)}"

    def is_valid_url(self, url):
        """Check if URL is valid."""
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except:
            return False

    async def scrape_product_info(self, url):
        """Scrape product information from URL."""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Extract basic info using common selectors
            raw_data = {
                'url': url,
                'title': self.extract_title(soup),
                'price': self.extract_price(soup),
                'description': self.extract_description(soup),
                'image_url': self.extract_image(soup, url),
                'brand': self.extract_brand(soup),
                'raw_text': soup.get_text()[:2000]  # Limit text for AI analysis
            }
            
            return raw_data
            
        except requests.exceptions.Timeout:
            return None, "Connection timeout - website took too long to respond"
        except requests.exceptions.ConnectionError:
            return None, "Connection failed - unable to reach website"
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 403:
                return None, "Access denied - website blocked automated access"
            elif e.response.status_code == 404:
                return None, "Page not found - invalid product link"
            else:
                return None, f"HTTP error {e.response.status_code}"
        except Exception as e:
            return None, f"Scraping failed: {str(e)}"

    def extract_title(self, soup):
        """Extract product title from page."""
        # Try multiple common selectors
        selectors = [
            'h1[data-automation-id="product-title"]',  # Generic
            'h1.product-title',
            'h1#product-title', 
            '.product-name h1',
            '.product-title',
            'h1[class*="title"]',
            'h1[class*="product"]',
            'h1[id*="title"]',
            'h1[id*="product"]',
            'title',
            'h1'
        ]
        
        for selector in selectors:
            element = soup.select_one(selector)
            if element and element.get_text().strip():
                return element.get_text().strip()
        
        return "Product Title Not Found"

    def extract_price(self, soup):
        """Extract product price from page."""
        # Try multiple price selectors
        selectors = [
            '.price-current',
            '.price',
            '.product-price',
            '[class*="price"]',
            '[data-testid*="price"]',
            '.cost',
            '.amount',
            '[class*="cost"]'
        ]
        
        for selector in selectors:
            elements = soup.select(selector)
            for element in elements:
                text = element.get_text().strip()
                # Look for price patterns
                price_match = re.search(r'[\$‚Ç¨¬£¬•‚ÇΩ]\s*[\d,]+\.?\d*|\d+[,.]?\d*\s*[\$‚Ç¨¬£¬•‚ÇΩ]', text)
                if price_match:
                    return price_match.group()
        
        return "Price Not Found"

    def extract_description(self, soup):
        """Extract product description from page."""
        selectors = [
            '.product-description',
            '.description',
            '[class*="description"]',
            '.product-details',
            '.product-info',
            '[class*="details"]',
            '.product-summary',
            'meta[name="description"]'
        ]
        
        for selector in selectors:
            element = soup.select_one(selector)
            if element:
                if element.name == 'meta':
                    desc = element.get('content', '').strip()
                else:
                    desc = element.get_text().strip()
                
                if desc and len(desc) > 20:
                    return desc[:500]  # Limit description length
        
        return "Description Not Found"

    def extract_image(self, soup, base_url):
        """Extract product image URL."""
        selectors = [
            '.product-image img',
            '.main-image img',
            '[class*="product"] img',
            '[class*="main"] img',
            'img[alt*="product"]',
            'img[class*="product"]',
            'img[src*="product"]'
        ]
        
        for selector in selectors:
            element = soup.select_one(selector)
            if element:
                src = element.get('src') or element.get('data-src')
                if src:
                    return urljoin(base_url, src)
        
        return None

    def extract_brand(self, soup):
        """Extract product brand from page."""
        selectors = [
            '.brand',
            '.product-brand',
            '[class*="brand"]',
            '[data-testid*="brand"]',
            'meta[property="product:brand"]',
            'span[itemprop="brand"]'
        ]
        
        for selector in selectors:
            element = soup.select_one(selector)
            if element:
                if element.name == 'meta':
                    brand = element.get('content', '').strip()
                else:
                    brand = element.get_text().strip()
                
                if brand and len(brand) < 50:
                    return brand
        
        return "Brand Not Found"

    async def analyze_product_with_ai(self, raw_data):
        """Use AI to analyze and clean up product information."""
        try:
            # Create a concise prompt to save tokens
            prompt = f"""Analyze this product data and extract key information:

URL: {raw_data['url']}
Title: {raw_data['title']}
Price: {raw_data['price']}
Brand: {raw_data['brand']}
Description: {raw_data['description']}

Extract and return ONLY:
1. Clean product name (max 50 chars)
2. Category (Electronics/Fashion/Home/Beauty/Other)
3. Key features (max 100 chars)
4. Clean price if found

Format: NAME|CATEGORY|FEATURES|PRICE"""

            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a product data analyzer. Be concise to save tokens."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=150,  # Limit tokens to save money
                temperature=0.1
            )
            
            result = response.choices[0].message.content.strip()
            parts = result.split('|')
            
            if len(parts) >= 4:
                return {
                    'name': parts[0].strip(),
                    'category': parts[1].strip(),
                    'features': parts[2].strip(),
                    'price': parts[3].strip(),
                    'brand': raw_data['brand'],
                    'image_url': raw_data['image_url'],
                    'url': raw_data['url']
                }
            else:
                # Fallback to raw data if AI parsing fails
                return {
                    'name': raw_data['title'][:50],
                    'category': 'Other',
                    'features': raw_data['description'][:100],
                    'price': raw_data['price'],
                    'brand': raw_data['brand'],
                    'image_url': raw_data['image_url'],
                    'url': raw_data['url']
                }
                
        except Exception as e:
            # Fallback to raw data if AI fails
            return {
                'name': raw_data['title'][:50],
                'category': 'Other', 
                'features': raw_data['description'][:100],
                'price': raw_data['price'],
                'brand': raw_data['brand'],
                'image_url': raw_data['image_url'],
                'url': raw_data['url']
            }

    def get_my_products_keyboard(self, context):
        """Create keyboard for My Products menu."""
        products = context.user_data.get('products', [])
        
        if not products:
            keyboard = [
                [InlineKeyboardButton("‚ûï Add Product Link", callback_data='add_product')],
                [InlineKeyboardButton("‚¨ÖÔ∏è Back to Main Menu", callback_data='main_menu')]
            ]
        else:
            keyboard = []
            
            # Show products (max 5)
            for i, product in enumerate(products):
                keyboard.append([InlineKeyboardButton(
                    f"üì¶ {product['name'][:25]}{'...' if len(product['name']) > 25 else ''}", 
                    callback_data=f'product_{i}'
                )])
            
            # Add controls
            keyboard.append([
                InlineKeyboardButton("‚ûï Add Product", callback_data='add_product'),
                InlineKeyboardButton("üóëÔ∏è Clear All", callback_data='clear_products')
            ])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back to Main Menu", callback_data='main_menu')])
        
        return InlineKeyboardMarkup(keyboard)

    def get_product_detail_keyboard(self, context, product_index):
        """Create keyboard for individual product details."""
        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è Delete Product", callback_data=f'delete_product_{product_index}'),
             InlineKeyboardButton("üîó Open Link", url=context.user_data['products'][product_index]['url'])],
            [InlineKeyboardButton("‚¨ÖÔ∏è Back to Products", callback_data='my_products')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_promo_creation_choice_keyboard(self, context):
        """Create keyboard for promo creation choice."""
        keyboard = [
            [InlineKeyboardButton("üì¶ From My Products", callback_data='promo_from_product'),
             InlineKeyboardButton("‚úèÔ∏è From Prompt", callback_data='promo_from_prompt')],
            [InlineKeyboardButton("‚¨ÖÔ∏è Back to Main Menu", callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_product_selection_keyboard(self, context):
        """Create keyboard for selecting a product to generate promo from."""
        products = context.user_data.get('products', [])
        keyboard = []
        
        for i, product in enumerate(products):
            keyboard.append([InlineKeyboardButton(
                f"üì¶ {product['name'][:30]}{'...' if len(product['name']) > 30 else ''}", 
                callback_data=f'select_product_{i}'
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back to Generation Menu", callback_data='generate_promo')])
        return InlineKeyboardMarkup(keyboard)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Send the welcome message with language selection."""
        # If user doesn't have a language set, show language selection first
        if 'language' not in context.user_data:
            welcome_message = TRANSLATIONS['en']['welcome_message']
            await update.message.reply_text(
                f"{TRANSLATIONS['en']['welcome_title']}\n\n{welcome_message}",
                parse_mode='Markdown',
                reply_markup=self.get_language_selection_keyboard()
            )
        else:
            # Show main menu if language is already set
            await self.show_main_menu_message(update, context)

    async def show_main_menu_message(self, update, context):
        """Show main menu as a new message."""
        text = f"{self.get_text('main_menu_title', context)}\n\n{self.get_text('main_menu_subtitle', context)}"
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=self.get_main_menu_keyboard(context)
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Send help message with menu."""
        # Ensure user has a language set
        if 'language' not in context.user_data:
            context.user_data['language'] = 'en'
        
        await update.message.reply_text(
            self.get_text('help_content', context),
            parse_mode='Markdown',
            reply_markup=self.get_main_menu_keyboard(context)
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle button press callbacks."""
        query = update.callback_query
        await query.answer()

        # Handle language selection
        if query.data.startswith('lang_'):
            await self.handle_language_selection(query, context)
        elif query.data == 'language_select':
            await self.show_language_selection(query, context)
        elif query.data == 'main_menu':
            await self.show_main_menu(query, context)
        elif query.data == 'generate_promo':
            await self.show_generate_promo(query, context)
        elif query.data == 'examples':
            await self.show_examples(query, context)
        elif query.data == 'help':
            await self.show_help(query, context)
        elif query.data.startswith('cat_'):
            await self.show_category_info(query, context)
        # Channel management callbacks
        elif query.data == 'channel_settings':
            await self.show_channel_settings(query, context)
        elif query.data == 'set_channel':
            await self.prompt_channel_setup(query, context)
        elif query.data == 'remove_channel':
            await self.remove_channel(query, context)
        elif query.data == 'toggle_autopost':
            await self.toggle_autopost(query, context)
        elif query.data == 'post_history':
            await self.show_post_history(query, context)
        elif query.data == 'post_to_channel':
            await self.initiate_channel_post(query, context)
        elif query.data == 'confirm_post':
            await self.confirm_channel_post(query, context)
        elif query.data == 'edit_post':
            await self.edit_post_text(query, context)
        elif query.data == 'cancel_post':
            await self.cancel_post(query, context)        # Product management callbacks
        elif query.data == 'my_products':
            await self.show_my_products(query, context)
        elif query.data == 'add_product':
            await self.prompt_add_product(query, context)
        elif query.data == 'clear_products':
            await self.clear_all_products(query, context)
        elif query.data.startswith('product_'):
            product_index = int(query.data.split('_')[1])
            await self.show_product_detail(query, context, product_index)
        elif query.data.startswith('delete_product_'):
            product_index = int(query.data.split('_')[2])
            await self.delete_product(query, context, product_index)
        elif query.data.startswith('gen_promo_'):
            product_index = int(query.data.split('_')[2])
            await self.generate_product_promo(query, context, product_index)
        elif query.data == 'promo_from_product':
            await self.show_promo_from_product(query, context)
        elif query.data == 'promo_from_prompt':
            await self.show_promo_from_prompt(query, context)
        elif query.data.startswith('select_product_'):
            product_index = int(query.data.split('_')[2])
            await self.generate_product_promo(query, context, product_index)

    async def show_generate_promo(self, query, context):
        """Show the promo generation choice menu."""
        products = context.user_data.get('products', [])
        
        if not products:
            # No products available, go directly to prompt-based
            await query.edit_message_text(
                text=self.get_text('generate_instructions', context),
                parse_mode='Markdown',
                reply_markup=self.get_back_to_menu_keyboard(context)
            )
        else:
            # Show choice between product-based and prompt-based
            text = f"üéØ **Generate Promotional Text**\n\nChoose how you want to create your promo:\n\nüì¶ **From My Products** - Generate promo from your saved products ({len(products)} available)\n\n‚úèÔ∏è **From Prompt** - Create promo by typing a product name\n\nWhat would you like to do?"
            await query.edit_message_text(
                text=text,
                parse_mode='Markdown',
                reply_markup=self.get_promo_creation_choice_keyboard(context)
            )

    async def show_promo_from_product(self, query, context):
        """Show product selection for promo generation."""
        products = context.user_data.get('products', [])
        
        if not products:
            text = "üì¶ **No Products Available**\n\nYou don't have any saved products yet. Add some products first or create a promo from a prompt!"
            await query.edit_message_text(
                text=text,
                parse_mode='Markdown',
                reply_markup=self.get_promo_creation_choice_keyboard(context)
            )
        else:
            text = f"üì¶ **Select Product ({len(products)} available)**\n\nChoose a product to generate promotional text for:"
            await query.edit_message_text(
                text=text,
                parse_mode='Markdown',
                reply_markup=self.get_product_selection_keyboard(context)
            )

    async def show_promo_from_prompt(self, query, context):
        """Show prompt-based promo generation instructions."""
        await query.edit_message_text(
            text=self.get_text('generate_instructions', context),
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle text messages from users."""
        # Handle channel input
        if await self.handle_channel_input(update, context):
            return
        
        # Handle post editing
        if await self.handle_post_edit(update, context):
            return
            
        # Handle product link input
        if await self.handle_product_link(update, context):
            return
        
        # Handle regular product name input for text generation
        await self.generate_promo_text(update, context)

    async def generate_promo_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Generate promotional text for the given product."""
        # Ensure user has a language set
        if 'language' not in context.user_data:
            context.user_data['language'] = 'en'

        product_name = update.message.text.strip()
        
        if not product_name:
            await update.message.reply_text(
                self.get_text('empty_product', context),
                reply_markup=self.get_main_menu_keyboard(context)
            )
            return
        
        # Show typing action
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        try:
            # Create the prompt for OpenAI in the user's language
            prompt = self.get_text('openai_prompt', context, product_name, product_name)
            system_prompt = self.get_text('system_prompt', context)

            # Generate response using OpenAI
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.7
            )

            promo_text = response.choices[0].message.content.strip()
            
            # Store the generated text and product name for potential channel posting
            context.user_data['last_generated_text'] = promo_text
            context.user_data['last_product_name'] = product_name
            
            # Format the response
            formatted_response = f"""
{self.get_text('promo_result', context, product_name)}

{promo_text}

---
{self.get_text('promo_footer', context)}
            """

            await update.message.reply_text(
                formatted_response, 
                parse_mode='Markdown',
                reply_markup=self.get_post_generation_keyboard(context)
            )
            
            # Check for auto-posting
            channel_info = context.user_data.get('channel_info', {})
            if channel_info.get('auto_post', False) and channel_info.get('channel_id'):
                # Auto post to channel
                success, message = await self.post_to_channel_action(context, promo_text, product_name)
                
                # Notify user about auto-post result
                status_emoji = "‚úÖ" if success else "‚ùå"
                auto_post_msg = f"\n\n{status_emoji} **Auto-post:** {message}"
                
                # Edit the previous message to include auto-post status
                try:
                    await update.message.edit_text(
                        formatted_response + auto_post_msg,
                        parse_mode='Markdown',
                        reply_markup=self.get_post_generation_keyboard(context)
                    )
                except:
                    # If editing fails, send a new message
                    await update.message.reply_text(
                        auto_post_msg,
                        parse_mode='Markdown'
                    )

        except openai.error.RateLimitError:
            try:
                await update.message.reply_text(
                    self.get_text('rate_limit', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )
            except:
                pass
        except openai.error.InvalidRequestError as e:
            logger.error(f"Invalid request to OpenAI: {e}")
            try:
                await update.message.reply_text(
                    self.get_text('request_error', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )
            except:
                pass
        except Exception as e:
            logger.error(f"Error generating promo text: {e}")
            try:
                await update.message.reply_text(
                    self.get_text('general_error', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )
            except:
                pass

    async def show_my_products(self, query, context):
        """Show My Products menu."""
        products = context.user_data.get('products', [])
        
        if not products:
            text = "üì¶ **My Products**\n\nNo products added yet!\n\nAdd product links to start creating amazing promotional content. I can analyze any e-commerce link and extract product information automatically.\n\n**Supported:** Amazon, eBay, AliExpress, Shopify stores, and many more!"
        else:
            text = f"üì¶ **My Products ({len(products)}/5)**\n\nYour saved products:\n\n"
            for i, product in enumerate(products, 1):
                text += f"{i}. **{product['name']}**\n   üí∞ {product['price']} | üìÇ {product['category']}\n\n"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_my_products_keyboard(context)
        )

    async def prompt_add_product(self, query, context):
        """Prompt user to add a product link."""
        products = context.user_data.get('products', [])
        
        if len(products) >= 5:
            text = "üì¶ **Product Limit Reached**\n\nYou can only store 5 products at a time. Please delete some products first or clear all to add new ones.\n\nThis limit helps keep the bot fast and efficient! üöÄ"
        else:
            context.user_data['waiting_for_product_link'] = True
            text = f"üîó **Add Product Link ({len(products)}/5)**\n\nSend me a product link from any online store!\n\n**Examples:**\n‚Ä¢ Amazon: https://amazon.com/product-name\n‚Ä¢ eBay: https://ebay.com/itm/product\n‚Ä¢ AliExpress: https://aliexpress.com/item/product\n‚Ä¢ Any e-commerce site with product pages\n\n**What I'll extract:**\n‚úÖ Product name & price\n‚úÖ Description & features\n‚úÖ Brand & category\n‚úÖ Product image\n\nJust paste the link below! üëá"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def clear_all_products(self, query, context):
        """Clear all products with confirmation."""
        products = context.user_data.get('products', [])
        
        if not products:
            text = "üì¶ **No Products to Clear**\n\nYou don't have any products saved yet."
        else:
            context.user_data['products'] = []
            text = f"üóëÔ∏è **All Products Cleared**\n\nRemoved {len(products)} products from your list. You can now add new products!"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_my_products_keyboard(context)
        )

    async def show_product_detail(self, query, context, product_index):
        """Show detailed information about a specific product."""
        products = context.user_data.get('products', [])
        
        if product_index >= len(products):
            await query.edit_message_text(
                "‚ùå Product not found.",
                reply_markup=self.get_my_products_keyboard(context)
            )
            return
        
        product = products[product_index]
        
        text = f"üì¶ **Product Details**\n\n"
        text += f"**Name:** {product['name']}\n"
        text += f"**Price:** {product['price']}\n"
        text += f"**Brand:** {product['brand']}\n"
        text += f"**Category:** {product['category']}\n"
        text += f"**Features:** {product['features']}\n\n"
        text += f"Ready to create promotional content for this product?"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_product_detail_keyboard(context, product_index)
        )

    async def delete_product(self, query, context, product_index):
        """Delete a specific product."""
        products = context.user_data.get('products', [])
        
        if product_index >= len(products):
            await query.edit_message_text(
                "‚ùå Product not found.",
                reply_markup=self.get_my_products_keyboard(context)
            )
            return
        
        product_name = products[product_index]['name']
        del products[product_index]
        context.user_data['products'] = products
        
        text = f"üóëÔ∏è **Product Deleted**\n\n**{product_name}** has been removed from your products list."
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_my_products_keyboard(context)
        )

    async def generate_product_promo(self, query, context, product_index):
        """Generate promotional text for a specific product."""
        products = context.user_data.get('products', [])
        
        if product_index >= len(products):
            await query.edit_message_text(
                "‚ùå Product not found.",
                reply_markup=self.get_my_products_keyboard(context)
            )
            return
        
        product = products[product_index]
        
        # Show typing action
        await context.bot.send_chat_action(chat_id=query.message.chat.id, action='typing')
        
        try:
            # Create product-specific prompt
            product_info = f"Product: {product['name']}\nPrice: {product['price']}\nBrand: {product['brand']}\nCategory: {product['category']}\nKey Features: {product['features']}"
            
            prompt = f"Create a compelling promotional post for this product:\n\n{product_info}\n\nThe promotional text should:\n- Be engaging and attention-grabbing\n- Highlight key benefits and features\n- Include a strong call-to-action\n- Be suitable for social media posting\n- Use emojis appropriately\n- Be between 50-150 words\n- Sound persuasive and professional\n- Include trending marketing language when appropriate"
            
            system_prompt = self.get_text('system_prompt', context)
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.7
            )
            
            promo_text = response.choices[0].message.content.strip()
            
            # Store for channel posting
            context.user_data['last_generated_text'] = promo_text
            context.user_data['last_product_name'] = product['name']
            
            # Format response
            text = f"üéØ **Promotional Text for: {product['name']}**\n\n{promo_text}\n\n---\nüí° *Feel free to customize this text for your specific needs!*"
            
            await query.edit_message_text(
                text=text,
                parse_mode='Markdown',
                reply_markup=self.get_post_generation_keyboard(context)
            )
            
            # Check for auto-posting
            channel_info = context.user_data.get('channel_info', {})
            if channel_info.get('auto_post', False) and channel_info.get('channel_id'):
                success, message = await self.post_to_channel_action(context, promo_text, product['name'])
                
                status_emoji = "‚úÖ" if success else "‚ùå"
                auto_post_msg = f"\n\n{status_emoji} **Auto-post:** {message}"
                
                try:
                    await query.edit_message_text(
                        text + auto_post_msg,
                        parse_mode='Markdown',
                        reply_markup=self.get_post_generation_keyboard(context)
                    )
                except:
                    pass
        
        except openai.error.RateLimitError:
            try:
                await query.edit_message_text(
                    self.get_text('rate_limit', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )
            except:
                await query.message.reply_text(
                    self.get_text('rate_limit', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )
        except openai.error.InvalidRequestError as e:
            logger.error(f"Invalid request to OpenAI: {e}")
            try:
                await query.edit_message_text(
                    self.get_text('request_error', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )
            except:
                await query.message.reply_text(
                    self.get_text('request_error', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )
        except Exception as e:
            logger.error(f"Error generating product promo: {e}")
            try:
                await query.edit_message_text(
                    self.get_text('general_error', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )
            except:
                await query.message.reply_text(
                    self.get_text('general_error', context),
                    reply_markup=self.get_main_menu_keyboard(context)
                )

    async def handle_product_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle product link input from user."""
        if not context.user_data.get('waiting_for_product_link'):
            return False
        
        url = update.message.text.strip()
        context.user_data['waiting_for_product_link'] = False
        
        # Validate URL
        if not self.is_valid_url(url):
            await update.message.reply_text(
                "‚ùå **Invalid URL**\n\nPlease send a valid product link starting with http:// or https://",
                parse_mode='Markdown',
                reply_markup=self.get_my_products_keyboard(context)
            )
            return True
        
        # Show processing message
        processing_msg = await update.message.reply_text(
            "üîÑ **Analyzing Product...**\n\nExtracting information from the link...",
            parse_mode='Markdown'
        )
        
        # Scrape product info
        raw_data = await self.scrape_product_info(url)
        
        if isinstance(raw_data, tuple):  # Error occurred
            await processing_msg.edit_text(
                f"‚ùå **Extraction Failed**\n\n{raw_data[1]}\n\n**Suggestions:**\n‚Ä¢ Try a different product link\n‚Ä¢ Make sure the link is public\n‚Ä¢ Check if the website allows automated access",
                parse_mode='Markdown',
                reply_markup=self.get_my_products_keyboard(context)
            )
            return True
        
        # Analyze with AI
        await processing_msg.edit_text(
            "ü§ñ **Analyzing with AI...**\n\nProcessing product information...",
            parse_mode='Markdown'
        )
        
        product_data = await self.analyze_product_with_ai(raw_data)
        
        # Store product
        if 'products' not in context.user_data:
            context.user_data['products'] = []
        
        context.user_data['products'].append(product_data)
        
        # Show success message
        text = f"‚úÖ **Product Added Successfully!**\n\n"
        text += f"**Name:** {product_data['name']}\n"
        text += f"**Price:** {product_data['price']}\n"
        text += f"**Brand:** {product_data['brand']}\n"
        text += f"**Category:** {product_data['category']}\n\n"
        text += f"Product saved to your list ({len(context.user_data['products'])}/5)!"
        
        await processing_msg.edit_text(
            text,
            parse_mode='Markdown',
            reply_markup=self.get_my_products_keyboard(context)
        )
        
        return True

    async def handle_language_selection(self, query, context):
        """Handle language selection."""
        lang_code = query.data.split('_')[1]
        context.user_data['language'] = lang_code
        
        text = f"{self.get_text('language_selected', context)}"
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_main_menu_keyboard(context)
        )

    async def show_language_selection(self, query, context):
        """Show language selection menu."""
        await query.edit_message_text(
            text=f"{self.get_text('language_title', context)}\n\n{self.get_text('language_subtitle', context)}",
            parse_mode='Markdown',
            reply_markup=self.get_language_selection_keyboard()
        )

    async def show_main_menu(self, query, context):
        """Show the main menu."""
        text = f"{self.get_text('main_menu_title', context)}\n\n{self.get_text('main_menu_subtitle', context)}"
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_main_menu_keyboard(context)
        )

    async def show_help(self, query, context):
        """Show help information."""
        await query.edit_message_text(
            text=self.get_text('help_content', context),
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def show_examples(self, query, context):
        """Show example promotional texts."""
        await query.edit_message_text(
            text=self.get_text('examples_content', context),
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def show_channel_settings(self, query, context):
        """Show channel settings menu."""
        channel_info = context.user_data.get('channel_info', {})
        channel_id = channel_info.get('channel_id')
        
        if channel_id:
            text = f"üì¢ **Channel Settings**\n\nConfigured channel: @{channel_id}\nAuto-post: {'‚úÖ Enabled' if channel_info.get('auto_post', False) else '‚ùå Disabled'}"
        else:
            text = "üì¢ **Channel Settings**\n\nNo channel configured yet. Add a channel to start posting your promotional content automatically!"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_channel_settings_keyboard(context)
        )

    async def show_category_info(self, query, context):
        """Show information about a specific category."""
        # For now, showing a simplified version - you can expand this with translated category info
        category_name = query.data.split('_')[1]
        text = f"üìù **{category_name.title()} Category**\n\nChoose this category to get specialized tips for creating promotional text.\n\nReady to create promotional text?\nJust type your product name in the chat below! üëá"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def prompt_channel_setup(self, query, context):
        """Prompt user to enter channel ID."""
        context.user_data['waiting_for_channel'] = True
        text = "üì¢ **Add Channel/Group**\n\nPlease send me the channel/group username (with @) or ID.\n\n**Example:** @mychannel\n\n**Note:** The bot must be added as an administrator to the channel/group with posting permissions."
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def remove_channel(self, query, context):
        """Remove configured channel."""
        if 'channel_info' in context.user_data:
            del context.user_data['channel_info']
        
        text = "‚úÖ **Channel Removed**\n\nChannel configuration has been removed. You can add a new channel anytime from the settings."
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_channel_settings_keyboard(context)
        )

    async def toggle_autopost(self, query, context):
        """Toggle auto-posting feature."""
        channel_info = context.user_data.get('channel_info', {})
        auto_post = not channel_info.get('auto_post', False)
        
        channel_info['auto_post'] = auto_post
        context.user_data['channel_info'] = channel_info
        
        status = "enabled" if auto_post else "disabled"
        text = f"ü§ñ **Auto-posting {status.title()}**\n\nAuto-posting is now {status}. Generated promotional texts will {'automatically' if auto_post else 'not'} be posted to your channel."
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_channel_settings_keyboard(context)
        )

    async def show_post_history(self, query, context):
        """Show posting history."""
        history = context.user_data.get('post_history', [])
        
        if not history:
            text = "üìä **Post History**\n\nNo posts yet. Generate some promotional content and post to your channel!"
        else:
            text = "üìä **Post History**\n\n"
            for i, post in enumerate(history[-10:], 1):  # Show last 10 posts
                status_emoji = "‚úÖ" if post['status'] == 'success' else "‚ùå"
                text += f"{i}. {status_emoji} **{post['product']}**\n   {post['timestamp']} - {post['status']}\n\n"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def handle_channel_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle channel ID input from user."""
        if not context.user_data.get('waiting_for_channel'):
            return False
        
        channel_input = update.message.text.strip()
        context.user_data['waiting_for_channel'] = False
        
        # Validate and verify channel
        success, message = await self.verify_channel_permissions(context, channel_input)
        
        if success:
            # Store channel info
            context.user_data['channel_info'] = {
                'channel_id': channel_input.replace('@', ''),
                'auto_post': False
            }
            
            text = f"‚úÖ **Channel Added Successfully**\n\nChannel @{channel_input.replace('@', '')} has been configured!\n\n{message}"
        else:
            text = f"‚ùå **Channel Setup Failed**\n\n{message}\n\nPlease make sure:\n1. The bot is added to the channel/group\n2. The bot has administrator permissions\n3. The bot can post messages"
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=self.get_channel_settings_keyboard(context)
        )
        return True

    async def initiate_channel_post(self, query, context):
        """Initiate posting to channel with confirmation."""
        stored_text = context.user_data.get('last_generated_text', '')
        product_name = context.user_data.get('last_product_name', '')
        
        if not stored_text:
            await query.edit_message_text(
                "‚ùå No promotional text found. Please generate text first.",
                reply_markup=self.get_back_to_menu_keyboard(context)
            )
            return
        
        channel_info = context.user_data.get('channel_info', {})
        channel_id = channel_info.get('channel_id', 'Unknown')
        
        # Store for posting
        context.user_data['pending_post'] = {
            'text': stored_text,
            'product': product_name
        }
        
        hashtags = self.generate_hashtags(product_name, context)
        preview_text = f"{stored_text}\n\n{hashtags}"
        
        text = f"üì§ **Confirm Channel Post**\n\nChannel: @{channel_id}\nProduct: {product_name}\n\n**Preview:**\n{preview_text[:200]}{'...' if len(preview_text) > 200 else ''}"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_post_confirmation_keyboard(context)
        )

    async def confirm_channel_post(self, query, context):
        """Confirm and execute channel post."""
        pending_post = context.user_data.get('pending_post', {})
        
        if not pending_post:
            await query.edit_message_text(
                "‚ùå No pending post found.",
                reply_markup=self.get_back_to_menu_keyboard(context)
            )
            return
        
        # Post to channel
        success, message = await self.post_to_channel_action(
            context, 
            pending_post['text'], 
            pending_post['product']
        )
        
        # Clean up
        if 'pending_post' in context.user_data:
            del context.user_data['pending_post']
        
        status_emoji = "‚úÖ" if success else "‚ùå"
        text = f"{status_emoji} **Post {('Successful' if success else 'Failed')}**\n\n{message}"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def edit_post_text(self, query, context):
        """Allow user to edit post text before posting."""
        context.user_data['editing_post'] = True
        text = "‚úèÔ∏è **Edit Post Text**\n\nSend me the edited version of your promotional text. You can modify it as needed before posting to the channel."
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def cancel_post(self, query, context):
        """Cancel the pending post."""
        if 'pending_post' in context.user_data:
            del context.user_data['pending_post']
        
        text = "‚ùå **Post Cancelled**\n\nThe post has been cancelled. You can generate new promotional text or return to the main menu."
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_back_to_menu_keyboard(context)
        )

    async def handle_post_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle edited post text."""
        if not context.user_data.get('editing_post'):
            return False
        
        edited_text = update.message.text.strip()
        context.user_data['editing_post'] = False
        
        # Update pending post
        if 'pending_post' in context.user_data:
            context.user_data['pending_post']['text'] = edited_text
            
            # Show confirmation again
            await self.initiate_channel_post_from_edit(update, context)
        else:
            await update.message.reply_text(
                "‚ùå No pending post found.",
                reply_markup=self.get_back_to_menu_keyboard(context)
            )
        return True

    async def initiate_channel_post_from_edit(self, update, context):
        """Show post confirmation after editing."""
        pending_post = context.user_data.get('pending_post', {})
        channel_info = context.user_data.get('channel_info', {})
        channel_id = channel_info.get('channel_id', 'Unknown')
        
        hashtags = self.generate_hashtags(pending_post['product'], context)
        preview_text = f"{pending_post['text']}\n\n{hashtags}"
        
        text = f"üì§ **Confirm Edited Post**\n\nChannel: @{channel_id}\nProduct: {pending_post['product']}\n\n**Preview:**\n{preview_text[:200]}{'...' if len(preview_text) > 200 else ''}"
        
        await update.message.reply_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=self.get_post_confirmation_keyboard(context)
        )

    def run(self):
        """Start the bot."""
        # Create the Application
        application = Application.builder().token(self.telegram_token).build()

        # Add handlers
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # Run the bot
        logger.info("Starting the Promo Bot...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        bot = PromoBot()
        bot.run()
    except ValueError as e:
        logger.error(f"Configuration error: {e}")
        print(f"Error: {e}")
        print("Please check your environment variables in the .env file")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        print(f"An unexpected error occurred: {e}")